/**
* @author : Amrit Sinha
* Date : February 16,2020
* GitHub : /SinhaAmrit
* CodePen : /SinhaAmrit
* Facebook : /codiizone
* Instagram : /codiizone
* website : https://codiizone.blogspot.com/
* A Country leader 


The Constitution of a certain country states that the leader is the person with the name containing the greatest number of different alphabet letters. (The country uses the uppercase English alphabet from A through Z.) For example, the name GOOGLE has four different alphabet letters: E, G, L, and O. The name APAC CODE JAM has eight different letters. If the country only consists of these 2 persons, APAC CODE JAM would be the leader.

If there is a tie, the person whose name comes earliest in alphabetical order is the leader.

Given a list of names of the citizens of the country, can you determine who the leader is?

Input

The first line of the input gives the number of test cases, T. T test cases follow. Each test case starts with a line with an interger N, the number of people in the country. Then N lines follow. The i-th line represents the name of the i-th person. Each name contains at most 20 characters and contains at least one alphabet letter.

Output

For each test case, output one line containing Case #x: y, where x is the test case number (starting from 1) and y is the name of the leader.

Limits

1 ≤ T ≤ 100.
1 ≤ N ≤ 100.

Small dataset

Each name consists of at most 20 characters and only consists of the uppercase English letters A through Z.

Large dataset

Each name consists of at most 20 characters and only consists of the uppercase English letters A through Z and ' '(space).
All names start and end with alphabet letters.

Sample


Input:
 2
 3 
ADAM 
BOB 
JOHNSON 
2 
A AB C
DEF

 output :
 Case #1: JOHNSON
 Case #2: A AB C 

Explanation:
In sample case #1, JOHNSON contains 5 different alphabet letters('H', 'J', 'N', 'O', 'S'), so he is the leader.

Sample case #2 would only appear in Large data set. The name DEF contains 3 different alphabet letters, the name A AB C also contains 3 different alphabet letters. A AB C comes alphabetically earlier so he is the leader.
*/

//Solution:
#include<stdio.h>
#include<stdlib.h>
#include<string.h>
struct names{
char name[20];
};
struct testcase{
 int pop;
 struct names n[20];
}arr[20];
main()
{ int n,i,j;
scanf("%d",&n);
for(i=0;i<n;i++)
{   scanf("%d",&arr[i].pop);
  for(j=0;j<arr[i].pop;j++)
  { fflush(stdin);
    fgets(arr[i].n[j].name,20,stdin);
  }
}
int k=0,alphabt,diff_alpha_counter,tmp_store=0,store,o=0;
int alpha_repeat_checker=0,no_of_diff_digit[20],max;
for(i=0;i<n;i++)
{
  for(j=0;j<arr[i].pop;j++)
  {
    for(alphabt=0;alphabt<26;alphabt++)
    {  while(arr[i].n[j].name[k]!='\n')
        {if(arr[i].n[j].name[k]=='A'+alphabt)
           {if(alpha_repeat_checker==0)
                diff_alpha_counter++;  
                alpha_repeat_checker=1;
           }k++;
         }
         alpha_repeat_checker=0;
         k=0;
       }
       no_of_diff_digit[j]=diff_alpha_counter;
       diff_alpha_counter=0;
   }
   max=no_of_diff_digit[0];
   for(j=1;j<arr[i].pop;j++)
   {
     if(max<no_of_diff_digit[j])
     {
     max=no_of_diff_digit[j];
     tmp_store=j;
   }    
}
char str[20];
strcpy(str,arr[i].n[tmp_store].name);
  for(j=0;j<arr[i].pop;j++)
  {  if(max==no_of_diff_digit[j])
    {  if(j!=tmp_store)
      {   if((strcmp(arr[i].n[j].name,str))<0)
        {  strcpy(str,arr[i].n[j].name);
          }
        }
      }  
    }
   printf("case#%d: ",i+1);
   printf("%s",str);
   tmp_store=0;
}
}
