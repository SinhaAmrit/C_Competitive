/**
* @author : Amrit Sinha
* Date : February 16,2020
* GitHub : /SinhaAmrit
* CodePen : /SinhaAmrit
* Facebook : /codiizone
* Instagram : /codiizone
* website : https://codiizone.blogspot.com/
* Google G round kickstart 2019

Given N integers A1, A2, ..., AN, count the number of triplets (x, y, z) (with 1 ≤ x < y < z ≤ N) such that at least one of the following is true:

Ax = Ay × Az, and/orAy = Ax × Az, and/orAz = Ax × Ay

Input

The first line of the input gives the number of test cases, T. T test cases follow. Each begins with one line containing an integer N: the number of integers in array A. The second line consists of N integers Ai; the i-th of these is the value of the i-th integer, as described above.

Output

For each test case, output one line containing Case #x: y, where x is the test case number (starting from 1) and yis the number of triplets satisfying the condition given in the problem statement.

Limits

1 ≤ T ≤ 30.
0 ≤ Ai ≤ 2 × 105, for all i.

Small dataset

3 ≤ N ≤ 200.

Large dataset

3 ≤ N ≤ 7000.

Sample
Input

 4
 6
 5 2 4 6 3 1
 6
 2 4 8 16 32 64
 4
 1 1 1 1
 3 
200000 200000 200000

Output

Case #1: 1
Case #2: 6 
Case #3: 4 
Case #4: 0
*/

//Solution 1:

#include <stdio.h>
#include <math.h>
int permu(int l[])
{
    if((l[0] == l[1] *l[2])||(l[2] == l[0]*l[1]))
    return 1;
    else if(l[1] == l[0] * l[2])
    return 1;
    return 0;
}
int main() {
    int t,n,g; scanf("%d",& t);
    g = t;
    while(t--)
    {
      scanf("%d",&n);
      int i=1,a[n];
       int sum= 0;
       for(int z = 0 ; z < n ; z ++)
       scanf("%d",&a[z]);
        while(i <=pow(2,n) -1)
        {
        int j = 0, o = 0,p = 0;
        int k = i,l[3] ={0},b[16] ={0};
           while(k)
           {
               b[j] = k%2;
               k /= 2;
               if(b[j++] == 1)
               {
               o++;
               }
           }
           if(o != 3)
           {
           i++;
           continue ;
           }
           for(int i = 0 ; i < j ; i ++)
           {
               if(b[i] == 1)
               {
                   l[p++] = a[i];
               }
           }
           if(permu(l))
           sum++;
           
           i++;
        }
       printf("Case #%d: %d\n",g-t,sum);
    }
    return 0;
}

//Solition 2:

#include<stdio.h>
struct testcase
{
int n1;
int numbr[30];
};
int sort(int* a,int n);
main()
{
int n,i;
scanf("%d",&n);
struct testcase arr[30];
for(i=0;i<n;i++)
{   scanf("%d",&arr[i].n1);
  for(int j=0;j<arr[i].n1;j++)
  scanf("%d",&arr[i].numbr[j]);
}
for(i=0;i<n;i++)
sort(arr[i].numbr,arr[i].n1);
int k,l,m,count=0;
for(i=0;i<n;i++)
{
  for(int j=0;j<arr[i].n1;j++)
  { 
  
  for(k=j+1;k<arr[i].n1;k++)
      {    
          for(l=k+1;l<arr[i].n1;l++)
          {  
      if(arr[i].numbr[j]==((arr[i].numbr[k])*(arr[i].numbr[l])))
            count++;
        }
      }
  }
printf("case#%d %d\n",i+1,count);
  count=0;
}

}
int sort(int* a,int n)
{
  int i,j,temp;
  for(i=0;i<n;i++)
  {
    for(j=0;j<n;j++)
    {  
  if(a[i]>a[j])
  {
    temp=a[j];
    a[j]=a[i];
    a[i]=temp;
  }
  
    }  
  }
}
